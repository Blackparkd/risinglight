Stage,Class_ID,Node_Count,Nodes
3,0,1,Constant(Bool(true))
3,1,1,Column($2.1)
3,2,1,Column($2.0)
3,3,1,"List([2, 1])"
3,4,1,Table($2)
3,5,3,"Scan([4, 3, 0]); Proj([3, 5]); Filter([0, 5])"
3,6,1,"Constant(String(""indian%""))"
3,7,3,"And([0, 7]); And([7, 0]); Like([1, 6])"
3,8,3,"Proj([3, 8]); Filter([0, 8]); Filter([7, 5])"
3,9,1,List([2])
3,10,3,"Proj([9, 8]); Proj([9, 10]); Filter([0, 10])"
3,11,1,Column($7.10)
3,12,1,Column($7.4)
3,13,1,Column($7.2)
3,14,1,Column($7.1)
3,15,1,"List([14, 13, 12, 11])"
3,16,1,Table($7)
3,17,3,"Scan([16, 15, 0]); Proj([15, 17]); Filter([0, 17])"
3,18,1,Constant(Date(Date(9862)))
3,19,3,"Gt([18, 11]); And([0, 19]); And([19, 0])"
3,20,1,Constant(Date(Date(9496)))
3,21,3,"GtEq([11, 20]); And([0, 21]); And([21, 0])"
3,22,4,"And([0, 22]); And([19, 21]); And([21, 19]); And([22, 0])"
3,23,5,"Proj([15, 23]); Filter([0, 23]); Filter([19, 135]); Filter([21, 89]); Filter([22, 17])"
3,24,1,"List([14, 13, 12])"
3,25,3,"Proj([24, 23]); Proj([24, 25]); Filter([0, 25])"
3,26,1,Column($4.4)
3,27,1,Column($4.3)
3,28,1,Column($4.2)
3,29,1,Column($4.1)
3,30,1,Column($4.0)
3,31,1,"List([30, 29, 28, 27, 26])"
3,32,1,Table($4)
3,33,3,"Scan([32, 31, 0]); Proj([31, 33]); Filter([0, 33])"
3,34,1,"List([14, 13])"
3,35,1,"List([30, 29])"
3,36,1,LeftOuter
3,37,3,"Join([36, 104, 33, 25]); HashJoin([36, 0, 35, 34, 33, 25]); HashJoin([36, 0, 196, 197, 33, 25])"
3,38,1,"List([30, 29, 28, 27, 26, 12])"
3,39,2,"Proj([38, 37]); Proj([38, 39])"
3,40,1,Sum(12)
3,41,1,List([40])
3,42,3,"Filter([0, 42]); HashAgg([31, 41, 39]); HashAgg([31, 41, 275])"
3,43,1,Ref(40)
3,44,1,Constant(Decimal(0.5))
3,45,1,"Mul([44, 43])"
3,46,1,"List([30, 29, 28, 27, 26, 45])"
3,47,3,"Proj([46, 42]); Proj([46, 279]); Filter([0, 47])"
3,48,1,Ref(45)
3,49,1,"List([30, 29, 28, 48])"
3,50,3,"Proj([49, 47]); Proj([49, 50]); Filter([0, 50])"
3,51,3,"Gt([28, 48]); And([0, 51]); And([51, 0])"
3,52,4,"Proj([49, 52]); Proj([49, 107]); Filter([0, 52]); Filter([51, 50])"
3,53,4,"Proj([35, 52]); Proj([35, 53]); Proj([35, 107]); Filter([0, 53])"
3,54,1,List([30])
3,55,1,Semi
3,56,3,"Filter([0, 56]); Join([55, 93, 53, 10]); HashJoin([55, 0, 54, 9, 53, 10])"
3,57,1,List([29])
3,58,3,"Proj([57, 56]); Proj([57, 58]); Filter([0, 58])"
3,59,1,Column($3.3)
3,60,1,Column($3.2)
3,61,1,Column($3.1)
3,62,1,Column($3.0)
3,63,1,"List([62, 61, 60, 59])"
3,64,1,Table($3)
3,65,3,"Scan([64, 63, 0]); Proj([63, 65]); Filter([0, 65])"
3,66,1,Column($0.1)
3,67,1,Column($0.0)
3,68,1,"List([67, 66])"
3,69,1,Table($0)
3,70,3,"Scan([69, 68, 0]); Proj([68, 70]); Filter([0, 70])"
3,71,1,"Constant(String(""IRAQ""))"
3,72,4,"Eq([66, 71]); Eq([71, 66]); And([0, 72]); And([72, 0])"
3,73,3,"Proj([68, 73]); Filter([0, 73]); Filter([72, 70])"
3,74,1,List([67])
3,75,3,"Proj([74, 73]); Proj([74, 75]); Filter([0, 75])"
3,76,1,List([59])
3,77,1,Inner
3,78,3,"Filter([0, 78]); Join([77, 96, 75, 65]); HashJoin([77, 0, 74, 76, 75, 65])"
3,79,1,"List([62, 61, 60])"
3,80,4,"Proj([79, 78]); Proj([79, 80]); Proj([79, 141]); Filter([0, 80])"
3,81,1,List([62])
3,82,2,"Join([55, 99, 80, 58]); HashJoin([55, 0, 81, 57, 80, 58])"
3,83,1,"List([61, 60])"
3,84,1,"Proj([83, 82])"
3,85,1,List([61])
3,86,1,"Order([85, 84])"
3,87,3,"Proj([15, 89]); Filter([0, 89]); Filter([19, 17])"
3,88,3,"Filter([0, 141]); Join([77, 96, 65, 75]); HashJoin([77, 0, 76, 74, 65, 75])"
3,89,4,"Eq([2, 30]); Eq([30, 2]); And([0, 93]); And([93, 0])"
3,90,2,"Filter([0, 107]); Filter([51, 47])"
3,91,4,"Eq([59, 67]); Eq([67, 59]); And([0, 96]); And([96, 0])"
3,92,1,"List([13, 14])"
3,93,4,"Eq([29, 62]); Eq([62, 29]); And([0, 99]); And([99, 0])"
3,94,1,"List([29, 30])"
3,95,4,"Eq([14, 30]); Eq([30, 14]); And([0, 102]); And([102, 0])"
3,96,4,"Eq([13, 29]); Eq([29, 13]); And([0, 103]); And([103, 0])"
3,97,4,"And([0, 104]); And([102, 103]); And([103, 102]); And([104, 0])"
3,98,3,"Proj([15, 135]); Filter([0, 135]); Filter([21, 17])"
3,99,1,"Filter([0, 39])"
3,100,1,"List([30, 29, 28, 27, 26, 43])"
3,101,1,"Proj([277, 42])"
3,102,1,"Filter([0, 278])"
